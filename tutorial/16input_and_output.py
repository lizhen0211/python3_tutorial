# Python3 输入和输出
# 输出格式美化
# str()： 函数返回一个用户易读的表达形式。
# repr()： 产生一个解释器易读的表达形式。

s = 'Hello, Runoob'
print(str(s))
print(repr(s))
print(str(1 / 7))
x = 10 * 3.25
y = 200 * 200
s = 'x 的值为： ' + repr(x) + ',  y 的值为：' + repr(y) + '...'
print(s)
# repr() 函数可以转义字符串中的特殊字符
hello = 'hello, runoob\n'
hellosRepr = repr(hello)
print(hellosRepr)
hellosStr = str(hello)
print(hellosStr)
# repr() 的参数可以是 Python 的任何对象
print(repr((x, y, ('Google', 'Runoob'))))
# ============================================================
print("=============================================================")
# 这里有两种方式输出一个平方与立方的表:
for x in range(1, 11):
    print(repr(x).rjust(2), repr(x * x).rjust(3), end=' ')
    # 注意前一行 'end' 的使用
    print(repr(x * x * x).rjust(4))
# ============================================================
print("=============================================================")
for x in range(1, 11):
    # 2d 表示两个宽度的10进制数显示
    print('{0:2d}{1:3d} {2:4d}'.format(x, x * x, x * x * x))
# ============================================================
print("=============================================================")
# str.format() 的基本使用如下:
print('{}网址： "{}!"'.format('菜鸟教程', 'www.runoob.com'))
print('{0} 和 {1}'.format('Google', 'Runoob'))
print('{1} 和 {0}'.format('Google', 'Runoob'))
# 如果在 format() 中使用了关键字参数, 那么它们的值会指向使用该名字的参数。
print('{name}网址： {site}'.format(name='菜鸟教程', site='www.runoob.com'))
# 位置及关键字参数可以任意的结合
print('站点列表 {0}, {1}, 和 {other}。'.format('Google', 'Runoob', other='Taobao'))
# 可选项 : 和格式标识符可以跟着字段名。 这就允许对值进行更好的格式化。 下面的例子将 Pi 保留到小数点后三位：
import math

print('常量 PI 的值近似为 {0:.3f}。'.format(math.pi))
# ============================================================
print("=============================================================")
table = {'Google': 1, 'Runoob': 2, 'Taobao': 3}
for name, number in table.items():
    print('{0:10} ==> {1:10d}'.format(name, number))
# ============================================================
print("=============================================================")
# 旧式字符串格式化
# % 操作符也可以实现字符串格式化。 它将左边的参数作为类似 sprintf() 式的格式化字符串, 而将右边的代入, 然后返回格式化后的字符串. 例如:
print('常量 PI 的值近似为：%5.3f。' % math.pi)
# 因为 str.format() 是比较新的函数， 大多数的 Python 代码仍然使用 % 操作符。
# 但是因为这种旧式的格式化最终会从该语言中移除, 应该更多的使用 str.format().
# ============================================================
print("=============================================================")
# 读取键盘输入
# Python提供了 input() 内置函数从标准输入读入一行文本，默认的标准输入是键盘。
# input 可以接收一个Python表达式作为输入，并将运算结果返回。
# str = input("请输入：")
# print("你输入的内容是: ", str)
# ============================================================
print("=============================================================")
# 读和写文件
# open() 将会返回一个 file 对象，基本语法格式如下:
# open(filename, mode)
# filename：包含了你要访问的文件名称的字符串值。
# mode：决定了打开文件的模式：只读，写入，追加等。
# 所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读(r)。
# 不同模式打开文件的完全列表：
# 详见 https://www.runoob.com/python3/python3-inputoutput.html 表格
# 实例
# 打开一个文件
f = open("D:/develop/python/foo.txt", "w")
f.write("Python 是一个非常好的语言。\n是的，的确非常好!!\n")
# 关闭打开的文件
f.close()
# 第一个参数为要打开的文件名。
# 第二个参数描述文件如何使用的字符。 mode 可以是 'r' 如果文件只读, 'w' 只用于写 (如果存在同名文件则将被删除), 和 'a' 用于追加文件内容;
# 所写的任何数据都会被自动增加到末尾. 'r+' 同时用于读写。 mode 参数是可选的; 'r' 将是默认值。

# 文件对象的方法
# ============================================================
print("=============================================================")
# f.read()
# 为了读取一个文件的内容，调用 f.read(size), 这将读取一定数目的数据, 然后作为字符串或字节对象返回。
# size 是一个可选的数字类型的参数。 当 size 被忽略了或者为负, 那么该文件的所有内容都将被读取并且返回。
# 以下实例假定文件 foo.txt 已存在（上面实例中已创建）：
# 打开一个文件
f = open("D:/develop/python/foo.txt", "r")
str1 = f.read()
print(str1)
# 关闭打开的文件
f.close()
# ============================================================
print("=============================================================")
# f.readline()
f = open("D:/develop/python/foo.txt", "r")
strs = f.readlines()
print(strs)
# 关闭打开的文件
f.close()
# ============================================================
print("=============================================================")
# 另一种方式是迭代一个文件对象然后读取每行:
# 打开一个文件
f = open("D:/develop/python/foo.txt", "w")
value = ('www.runoob.com', 14)
s = str(value)
f.write(s)
# 关闭打开的文件
f.close()
# ============================================================
print("=============================================================")
# f.tell()
# f.tell() 返回文件对象当前所处的位置, 它是从文件开头开始算起的字节数。
f = open("D:/develop/python/foo.txt", "r")
print(f.tell())
